// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: menu.proto

package menu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MenuClient is the client API for Menu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuClient interface {
	AddMeal(ctx context.Context, in *MealDetails, opts ...grpc.CallOption) (*ID, error)
	GetMealByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*MealInfo, error)
	UpdateMeal(ctx context.Context, in *MealInfo, opts ...grpc.CallOption) (*Void, error)
	DeleteMeal(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error)
	FetchMeals(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Meals, error)
}

type menuClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuClient(cc grpc.ClientConnInterface) MenuClient {
	return &menuClient{cc}
}

func (c *menuClient) AddMeal(ctx context.Context, in *MealDetails, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/menu.Menu/AddMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetMealByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*MealInfo, error) {
	out := new(MealInfo)
	err := c.cc.Invoke(ctx, "/menu.Menu/GetMealByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) UpdateMeal(ctx context.Context, in *MealInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/menu.Menu/UpdateMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) DeleteMeal(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/menu.Menu/DeleteMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) FetchMeals(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Meals, error) {
	out := new(Meals)
	err := c.cc.Invoke(ctx, "/menu.Menu/FetchMeals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServer is the server API for Menu service.
// All implementations must embed UnimplementedMenuServer
// for forward compatibility
type MenuServer interface {
	AddMeal(context.Context, *MealDetails) (*ID, error)
	GetMealByID(context.Context, *ID) (*MealInfo, error)
	UpdateMeal(context.Context, *MealInfo) (*Void, error)
	DeleteMeal(context.Context, *ID) (*Void, error)
	FetchMeals(context.Context, *Filter) (*Meals, error)
	mustEmbedUnimplementedMenuServer()
}

// UnimplementedMenuServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServer struct {
}

func (UnimplementedMenuServer) AddMeal(context.Context, *MealDetails) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMeal not implemented")
}
func (UnimplementedMenuServer) GetMealByID(context.Context, *ID) (*MealInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealByID not implemented")
}
func (UnimplementedMenuServer) UpdateMeal(context.Context, *MealInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeal not implemented")
}
func (UnimplementedMenuServer) DeleteMeal(context.Context, *ID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeal not implemented")
}
func (UnimplementedMenuServer) FetchMeals(context.Context, *Filter) (*Meals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMeals not implemented")
}
func (UnimplementedMenuServer) mustEmbedUnimplementedMenuServer() {}

// UnsafeMenuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServer will
// result in compilation errors.
type UnsafeMenuServer interface {
	mustEmbedUnimplementedMenuServer()
}

func RegisterMenuServer(s grpc.ServiceRegistrar, srv MenuServer) {
	s.RegisterService(&Menu_ServiceDesc, srv)
}

func _Menu_AddMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).AddMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/AddMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).AddMeal(ctx, req.(*MealDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetMealByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetMealByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/GetMealByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetMealByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_UpdateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).UpdateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/UpdateMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).UpdateMeal(ctx, req.(*MealInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_DeleteMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).DeleteMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/DeleteMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).DeleteMeal(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_FetchMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).FetchMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/menu.Menu/FetchMeals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).FetchMeals(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// Menu_ServiceDesc is the grpc.ServiceDesc for Menu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Menu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menu.Menu",
	HandlerType: (*MenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMeal",
			Handler:    _Menu_AddMeal_Handler,
		},
		{
			MethodName: "GetMealByID",
			Handler:    _Menu_GetMealByID_Handler,
		},
		{
			MethodName: "UpdateMeal",
			Handler:    _Menu_UpdateMeal_Handler,
		},
		{
			MethodName: "DeleteMeal",
			Handler:    _Menu_DeleteMeal_Handler,
		},
		{
			MethodName: "FetchMeals",
			Handler:    _Menu_FetchMeals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menu.proto",
}
