// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: reservation.proto

package reservation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReservationClient is the client API for Reservation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationClient interface {
	CreateReservation(ctx context.Context, in *ReservationDetails, opts ...grpc.CallOption) (*ID, error)
	GetReservationByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ReservationInfo, error)
	UpdateReservation(ctx context.Context, in *ReservationInfo, opts ...grpc.CallOption) (*Void, error)
	DeleteReservation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error)
	ValidateReservation(ctx context.Context, in *ReservationDetails, opts ...grpc.CallOption) (*ID, error)
	Order(ctx context.Context, in *ReservationOrders, opts ...grpc.CallOption) (*ID, error)
	Pay(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	FetchReservations(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Reservations, error)
}

type reservationClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationClient(cc grpc.ClientConnInterface) ReservationClient {
	return &reservationClient{cc}
}

func (c *reservationClient) CreateReservation(ctx context.Context, in *ReservationDetails, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/CreateReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) GetReservationByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ReservationInfo, error) {
	out := new(ReservationInfo)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/GetReservationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) UpdateReservation(ctx context.Context, in *ReservationInfo, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/UpdateReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) DeleteReservation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/DeleteReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) ValidateReservation(ctx context.Context, in *ReservationDetails, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/ValidateReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Order(ctx context.Context, in *ReservationOrders, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) Pay(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationClient) FetchReservations(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Reservations, error) {
	out := new(Reservations)
	err := c.cc.Invoke(ctx, "/reservation.Reservation/FetchReservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServer is the server API for Reservation service.
// All implementations must embed UnimplementedReservationServer
// for forward compatibility
type ReservationServer interface {
	CreateReservation(context.Context, *ReservationDetails) (*ID, error)
	GetReservationByID(context.Context, *ID) (*ReservationInfo, error)
	UpdateReservation(context.Context, *ReservationInfo) (*Void, error)
	DeleteReservation(context.Context, *ID) (*Void, error)
	ValidateReservation(context.Context, *ReservationDetails) (*ID, error)
	Order(context.Context, *ReservationOrders) (*ID, error)
	Pay(context.Context, *ID) (*Status, error)
	FetchReservations(context.Context, *Filter) (*Reservations, error)
	mustEmbedUnimplementedReservationServer()
}

// UnimplementedReservationServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServer struct {
}

func (UnimplementedReservationServer) CreateReservation(context.Context, *ReservationDetails) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedReservationServer) GetReservationByID(context.Context, *ID) (*ReservationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationByID not implemented")
}
func (UnimplementedReservationServer) UpdateReservation(context.Context, *ReservationInfo) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation not implemented")
}
func (UnimplementedReservationServer) DeleteReservation(context.Context, *ID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservation not implemented")
}
func (UnimplementedReservationServer) ValidateReservation(context.Context, *ReservationDetails) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateReservation not implemented")
}
func (UnimplementedReservationServer) Order(context.Context, *ReservationOrders) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Order not implemented")
}
func (UnimplementedReservationServer) Pay(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedReservationServer) FetchReservations(context.Context, *Filter) (*Reservations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReservations not implemented")
}
func (UnimplementedReservationServer) mustEmbedUnimplementedReservationServer() {}

// UnsafeReservationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServer will
// result in compilation errors.
type UnsafeReservationServer interface {
	mustEmbedUnimplementedReservationServer()
}

func RegisterReservationServer(s grpc.ServiceRegistrar, srv ReservationServer) {
	s.RegisterService(&Reservation_ServiceDesc, srv)
}

func _Reservation_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/CreateReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).CreateReservation(ctx, req.(*ReservationDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_GetReservationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).GetReservationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/GetReservationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).GetReservationByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_UpdateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).UpdateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/UpdateReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).UpdateReservation(ctx, req.(*ReservationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_DeleteReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).DeleteReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/DeleteReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).DeleteReservation(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_ValidateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).ValidateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/ValidateReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).ValidateReservation(ctx, req.(*ReservationDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Order(ctx, req.(*ReservationOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).Pay(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reservation_FetchReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServer).FetchReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reservation.Reservation/FetchReservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServer).FetchReservations(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

// Reservation_ServiceDesc is the grpc.ServiceDesc for Reservation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reservation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservation.Reservation",
	HandlerType: (*ReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReservation",
			Handler:    _Reservation_CreateReservation_Handler,
		},
		{
			MethodName: "GetReservationByID",
			Handler:    _Reservation_GetReservationByID_Handler,
		},
		{
			MethodName: "UpdateReservation",
			Handler:    _Reservation_UpdateReservation_Handler,
		},
		{
			MethodName: "DeleteReservation",
			Handler:    _Reservation_DeleteReservation_Handler,
		},
		{
			MethodName: "ValidateReservation",
			Handler:    _Reservation_ValidateReservation_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Reservation_Order_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Reservation_Pay_Handler,
		},
		{
			MethodName: "FetchReservations",
			Handler:    _Reservation_FetchReservations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation.proto",
}
